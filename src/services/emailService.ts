export interface OrderItem {
  id: string;
  name: string;
  price: number;
  quantity: number;
  image: string;
}

export interface Order {
  id: string;
  user: {
    name: string;
    surname: string;
    patronymic: string;
    email: string;
    phone: string;
    sector: string;
  };
  items: OrderItem[];
  totalAmount: number;
  orderDate: string;
}

export const sendOrderNotification = async (order: Order) => {
  try {
    // Simulate sending email to sales manager
    console.log('üìß Sending order notification to sales manager...');
    
    // In a real implementation, you would send this to your backend API
    // which would then send emails using services like SendGrid, Mailgun, etc.
    
    const managerEmail = {
      to: 'sales@kubsantechopt.ru', // Replace with actual manager email
      subject: `–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #${order.id}`,
      body: `
        –ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑!
        
        –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: ${order.id}
        –î–∞—Ç–∞: ${order.orderDate}
        
        –ö–ª–∏–µ–Ω—Ç:
        –ò–º—è: ${order.user.surname} ${order.user.name} ${order.user.patronymic}
        Email: ${order.user.email}
        –¢–µ–ª–µ—Ñ–æ–Ω: ${order.user.phone}
        –°–µ–∫—Ç–æ—Ä: ${order.user.sector}
        
        –¢–æ–≤–∞—Ä—ã:
        ${order.items.map(item => 
          `- ${item.name} (${item.quantity} —à—Ç.) - ${item.price.toLocaleString('ru-RU')} ‚ÇΩ`
        ).join('\n')}
        
        –û–±—â–∞—è —Å—É–º–º–∞: ${order.totalAmount.toLocaleString('ru-RU')} ‚ÇΩ
        
        –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∫–ª–∏–µ–Ω—Ç–æ–º –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ.
      `
    };

    // Simulate sending confirmation email to customer
    console.log('üìß Sending confirmation email to customer...');
    
    const customerEmail = {
      to: order.user.email,
      subject: `–ó–∞–∫–∞–∑ #${order.id} –ø–æ–ª—É—á–µ–Ω`,
      body: `
        –£–≤–∞–∂–∞–µ–º—ã–π ${order.user.surname} ${order.user.name} ${order.user.patronymic}!
        
        –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –∑–∞–∫–∞–∑!
        
        –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: ${order.id}
        –î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: ${order.orderDate}
        
        –¢–æ–≤–∞—Ä—ã:
        ${order.items.map(item => 
          `- ${item.name} (${item.quantity} —à—Ç.) - ${item.price.toLocaleString('ru-RU')} ‚ÇΩ`
        ).join('\n')}
        
        –û–±—â–∞—è —Å—É–º–º–∞: ${order.totalAmount.toLocaleString('ru-RU')} ‚ÇΩ
        
        –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –∏ —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –¥–æ—Å—Ç–∞–≤–∫–∏.
        
        –° —É–≤–∞–∂–µ–Ω–∏–µ–º,
        –ö–æ–º–∞–Ω–¥–∞ –ö—É–±–°–∞–Ω—Ç–µ—Ö–û–ø—Ç
      `
    };

    // Simulate API delay
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    console.log('‚úÖ Emails sent successfully!');
    
    return {
      success: true,
      managerEmail,
      customerEmail
    };
    
  } catch (error) {
    console.error('‚ùå Error sending emails:', error);
    throw new Error('Failed to send order notifications');
  }
};